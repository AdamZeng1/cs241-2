[
  {
    "timestamp": "2016-09-16 00:00:00.651725", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==26829== Memcheck, a memory error detector\n==26829== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26829== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==26829== Command: ././full_test\n==26829== \n==26829== Invalid write of size 8\n==26829==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26829==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==26829== \n==26829== \n==26829== Process terminating with default action of signal 11 (SIGSEGV)\n==26829==  Access not within mapped region at address 0x0\n==26829==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26829==  If you believe this happened as a result of a stack\n==26829==  overflow in your program's main thread (unlikely but\n==26829==  possible), you can try to increase the size of the\n==26829==  main thread stack using the --main-stacksize= flag.\n==26829==  The main thread stack size used in this run was 8388608.\n==26829== \n==26829== HEAP SUMMARY:\n==26829==     in use at exit: 0 bytes in 0 blocks\n==26829==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==26829== \n==26829== All heap blocks were freed -- no leaks are possible\n==26829== \n==26829== For counts of detected and suppressed errors, rerun with: -v\n==26829== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "22355"
  }, 
  {
    "timestamp": "2016-09-17 00:00:00.660261", 
    "testcases": [
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has no memory leaks.", 
        "name": "no_leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has memory leaks.", 
        "name": "leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has bad frees.", 
        "name": "bad_free", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues.", 
        "name": "full", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "name": "memory", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==10763== Memcheck, a memory error detector\n==10763== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==10763== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==10763== Command: ././full_test\n==10763== \n==10763== Invalid write of size 8\n==10763==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==10763==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==10763== \n==10763== \n==10763== Process terminating with default action of signal 11 (SIGSEGV)\n==10763==  Access not within mapped region at address 0x0\n==10763==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==10763==  If you believe this happened as a result of a stack\n==10763==  overflow in your program's main thread (unlikely but\n==10763==  possible), you can try to increase the size of the\n==10763==  main thread stack using the --main-stacksize= flag.\n==10763==  The main thread stack size used in this run was 8388608.\n==10763== \n==10763== HEAP SUMMARY:\n==10763==     in use at exit: 0 bytes in 0 blocks\n==10763==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==10763== \n==10763== All heap blocks were freed -- no leaks are possible\n==10763== \n==10763== For counts of detected and suppressed errors, rerun with: -v\n==10763== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n"
      }
    ], 
    "revision": "22842", 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-18 00:00:00.646216", 
    "testcases": [
      {
        "description": "Test with program that has no memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "no_leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has bad frees.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "bad_free", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "full", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==26821== Memcheck, a memory error detector\n==26821== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26821== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==26821== Command: ././full_test\n==26821== \n==26821== Invalid write of size 8\n==26821==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26821==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==26821== \n==26821== \n==26821== Process terminating with default action of signal 11 (SIGSEGV)\n==26821==  Access not within mapped region at address 0x0\n==26821==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26821==  If you believe this happened as a result of a stack\n==26821==  overflow in your program's main thread (unlikely but\n==26821==  possible), you can try to increase the size of the\n==26821==  main thread stack using the --main-stacksize= flag.\n==26821==  The main thread stack size used in this run was 8388608.\n==26821== \n==26821== HEAP SUMMARY:\n==26821==     in use at exit: 0 bytes in 0 blocks\n==26821==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==26821== \n==26821== All heap blocks were freed -- no leaks are possible\n==26821== \n==26821== For counts of detected and suppressed errors, rerun with: -v\n==26821== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "name": "memory", 
        "ptsPossible": 1.0
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "23710"
  }, 
  {
    "timestamp": "2016-09-19 00:00:00.656635", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==10551== Memcheck, a memory error detector\n==10551== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==10551== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==10551== Command: ././full_test\n==10551== \n==10551== Invalid write of size 8\n==10551==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==10551==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==10551== \n==10551== \n==10551== Process terminating with default action of signal 11 (SIGSEGV)\n==10551==  Access not within mapped region at address 0x0\n==10551==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==10551==  If you believe this happened as a result of a stack\n==10551==  overflow in your program's main thread (unlikely but\n==10551==  possible), you can try to increase the size of the\n==10551==  main thread stack using the --main-stacksize= flag.\n==10551==  The main thread stack size used in this run was 8388608.\n==10551== \n==10551== HEAP SUMMARY:\n==10551==     in use at exit: 0 bytes in 0 blocks\n==10551==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==10551== \n==10551== All heap blocks were freed -- no leaks are possible\n==10551== \n==10551== For counts of detected and suppressed errors, rerun with: -v\n==10551== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "revision": "25067", 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-20 00:00:00.648912", 
    "testcases": [
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has no memory leaks.", 
        "name": "no_leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has memory leaks.", 
        "name": "leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has bad frees.", 
        "name": "bad_free", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues.", 
        "name": "full", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "name": "memory", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==26735== Memcheck, a memory error detector\n==26735== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26735== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==26735== Command: ././full_test\n==26735== \n==26735== Invalid write of size 8\n==26735==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26735==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==26735== \n==26735== \n==26735== Process terminating with default action of signal 11 (SIGSEGV)\n==26735==  Access not within mapped region at address 0x0\n==26735==    at 0x4008DE: main (in .../ryang28/mini_valgrind/full_test)\n==26735==  If you believe this happened as a result of a stack\n==26735==  overflow in your program's main thread (unlikely but\n==26735==  possible), you can try to increase the size of the\n==26735==  main thread stack using the --main-stacksize= flag.\n==26735==  The main thread stack size used in this run was 8388608.\n==26735== \n==26735== HEAP SUMMARY:\n==26735==     in use at exit: 0 bytes in 0 blocks\n==26735==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==26735== \n==26735== All heap blocks were freed -- no leaks are possible\n==26735== \n==26735== For counts of detected and suppressed errors, rerun with: -v\n==26735== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n"
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "26795"
  }, 
  {
    "timestamp": "2016-09-21 00:00:00.673242", 
    "testcases": [
      {
        "description": "Test with program that has no memory leaks.", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "no_leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has memory leaks.", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has bad frees.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "bad_free", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues.", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "full", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==22338== Memcheck, a memory error detector\n==22338== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==22338== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==22338== Command: ././full_test\n==22338== \n==22338== \n==22338== HEAP SUMMARY:\n==22338==     in use at exit: 0 bytes in 0 blocks\n==22338==   total heap usage: 3 allocs, 3 frees, 520 bytes allocated\n==22338== \n==22338== All heap blocks were freed -- no leaks are possible\n==22338== \n==22338== For counts of detected and suppressed errors, rerun with: -v\n==22338== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n", 
        "name": "memory", 
        "ptsPossible": 1.0
      }
    ], 
    "revision": "27776", 
    "checksum": "a82228e2d25e9bc1b31ef46dada4eca4f415a24b  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-22 00:00:00.665196", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==6444== Memcheck, a memory error detector\n==6444== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==6444== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==6444== Command: ././full_test\n==6444== \n==6444== \n==6444== HEAP SUMMARY:\n==6444==     in use at exit: 0 bytes in 0 blocks\n==6444==   total heap usage: 3 allocs, 3 frees, 520 bytes allocated\n==6444== \n==6444== All heap blocks were freed -- no leaks are possible\n==6444== \n==6444== For counts of detected and suppressed errors, rerun with: -v\n==6444== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "checksum": "691b9974f4d51a525822279dafa21eddba291aca  mini_valgrind.c", 
    "revision": "29130"
  }
]